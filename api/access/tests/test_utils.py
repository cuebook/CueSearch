import pytest
import unittest
from unittest import mock
from access.utils import prepareAnomalyDataframes
from pandas import Timestamp
from decimal import Decimal
from mixer.backend.django import mixer
import pandas as pd

def test_datasets(client, mocker):
    fakedata = [{'CREATEDTS': Timestamp('2021-06-21 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Lucknow',
        'DeliveryPostalCode': '226010',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('1.000000000')},
        {'CREATEDTS': Timestamp('2021-06-21 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452016',
        'RefundAmount': Decimal('249.000000000'),
        'ReceivedQty': Decimal('1.000000000')},
        {'CREATEDTS': Timestamp('2021-06-21 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Lucknow',
        'DeliveryPostalCode': '226028',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('0E-9')},
        {'CREATEDTS': Timestamp('2021-06-21 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452018',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('0E-9')},
        {'CREATEDTS': Timestamp('2021-06-21 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452001',
        'RefundAmount': Decimal('2616.000000000'),
        'ReceivedQty': Decimal('4.000000000')},
        {'CREATEDTS': Timestamp('2021-06-21 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Lucknow',
        'DeliveryPostalCode': '226018',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('0E-9')},
        {'CREATEDTS': Timestamp('2021-06-21 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Lucknow',
        'DeliveryPostalCode': '226010',
        'RefundAmount': Decimal('2282.750000000'),
        'ReceivedQty': Decimal('4.000000000')},
        {'CREATEDTS': Timestamp('2021-06-21 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452001',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('0E-9')},
        {'CREATEDTS': Timestamp('2021-06-21 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Lucknow',
        'DeliveryPostalCode': '226004',
        'RefundAmount': Decimal('2158.400000000'),
        'ReceivedQty': Decimal('2.000000000')},
        {'CREATEDTS': Timestamp('2021-06-21 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Lucknow',
        'DeliveryPostalCode': '226010',
        'RefundAmount': Decimal('999.000000000'),
        'ReceivedQty': Decimal('1.000000000')},
        {'CREATEDTS': Timestamp('2021-06-21 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Lucknow',
        'DeliveryPostalCode': '226008',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('1.000000000')},
        {'CREATEDTS': Timestamp('2021-06-21 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452002',
        'RefundAmount': Decimal('1399.000000000'),
        'ReceivedQty': Decimal('1.000000000')},
        {'CREATEDTS': Timestamp('2021-06-21 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452002',
        'RefundAmount': Decimal('559.300000000'),
        'ReceivedQty': Decimal('1.000000000')},
        {'CREATEDTS': Timestamp('2021-06-21 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Lucknow',
        'DeliveryPostalCode': '226011',
        'RefundAmount': Decimal('2399.000000000'),
        'ReceivedQty': Decimal('2.000000000')},
        {'CREATEDTS': Timestamp('2021-06-21 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Lucknow',
        'DeliveryPostalCode': '226010',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('0E-9')},
        {'CREATEDTS': Timestamp('2021-06-22 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452001',
        'RefundAmount': Decimal('990.000000000'),
        'ReceivedQty': Decimal('2.000000000')},
        {'CREATEDTS': Timestamp('2021-06-22 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452001',
        'RefundAmount': Decimal('2239.200000000'),
        'ReceivedQty': Decimal('1.000000000')},
        {'CREATEDTS': Timestamp('2021-06-22 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Lucknow',
        'DeliveryPostalCode': '226003',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('2.000000000')},
        {'CREATEDTS': Timestamp('2021-06-22 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Lucknow',
        'DeliveryPostalCode': '226004',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('1.000000000')},
        {'CREATEDTS': Timestamp('2021-06-22 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452001',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('2.000000000')},
        {'CREATEDTS': Timestamp('2021-06-22 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Lucknow',
        'DeliveryPostalCode': '226005',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('4.000000000')},
        {'CREATEDTS': Timestamp('2021-06-22 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Lucknow',
        'DeliveryPostalCode': '226010',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('3.000000000')},
        {'CREATEDTS': Timestamp('2021-06-22 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Lucknow',
        'DeliveryPostalCode': '226010',
        'RefundAmount': Decimal('1499.400000000'),
        'ReceivedQty': Decimal('1.000000000')},
        {'CREATEDTS': Timestamp('2021-06-22 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452010',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('0E-9')},
        {'CREATEDTS': Timestamp('2021-06-22 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452010',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('3.000000000')},
        {'CREATEDTS': Timestamp('2021-06-22 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452001',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('3.000000000')},
        {'CREATEDTS': Timestamp('2021-06-22 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452001',
        'RefundAmount': Decimal('1050.000000000'),
        'ReceivedQty': Decimal('1.000000000')},
        {'CREATEDTS': Timestamp('2021-06-22 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452001',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('0E-9')},
        {'CREATEDTS': Timestamp('2021-06-22 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452001',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('0E-9')},
        {'CREATEDTS': Timestamp('2021-06-22 00:00:00+0000', tz='UTC'),
        'DeliveryCity': 'Indore',
        'DeliveryPostalCode': '452001',
        'RefundAmount': Decimal('0E-9'),
        'ReceivedQty': Decimal('0E-9')}]
    
    datasetDf = pd.DataFrame(fakedata)
    dimValsData = prepareAnomalyDataframes(datasetDf, timestampCol="CREATEDTS", metricCol="ReceivedQty", operation="Top")
    assert (dimValsData[0]["df"].columns == ['ds', 'y']).all()
    assert dimValsData[0]["df"].iloc[0]["y"] == 18
    assert dimValsData[0]["dimVal"] == None

    dimValsData = prepareAnomalyDataframes(datasetDf, timestampCol="CREATEDTS", metricCol="ReceivedQty",dimensionCol="DeliveryCity", operation="Min % Contribution", value=1)
    assert (dimValsData[0]["df"].columns == ['ds', 'y']).all()
    assert dimValsData[0]["df"].iloc[0]["y"] == 11.0
    assert dimValsData[0]["dimVal"] == "Lucknow"
    assert dimValsData[1]["dimVal"] == "Indore"
    dimValsData = prepareAnomalyDataframes(datasetDf, timestampCol="CREATEDTS", metricCol="ReceivedQty", dimensionCol="DeliveryCity", operation="Min Avg Value")
    assert (dimValsData[0]["df"].columns == ['ds', 'y']).all()
    assert dimValsData[0]["df"].iloc[0]["y"] == 11.0
    assert dimValsData[0]["dimVal"] == "Lucknow"

    dimValsData = prepareAnomalyDataframes(datasetDf, timestampCol="CREATEDTS", metricCol="ReceivedQty", dimensionCol="DeliveryCity", operation="Top")
    assert (dimValsData[1]["df"].columns == ['ds', 'y']).all()
    assert dimValsData[1]["df"].iloc[0]["y"] == 7
    assert "Lucknow" in [dimVal["dimVal"] for dimVal in dimValsData]


def test_nonRollupDataset():
    datasetDf = pd.DataFrame([{'CREATEDTS': '2021-09-29T00:00:00.000Z',
        'Brand': 'Adidas',
        'OrderAmount': 225020.0},
        {'CREATEDTS': '2021-09-29T00:00:00.000Z',
        'Brand': 'Zara',
        'OrderAmount': 1823.0},
        {'CREATEDTS': '2021-09-28T00:00:00.000Z',
        'Brand': 'Adidas',
        'OrderAmount': 314205.0},
        {'CREATEDTS': '2021-09-28T00:00:00.000Z',
        'Brand': 'Zara',
        'OrderAmount': 4713.0},
        {'CREATEDTS': '2021-09-27T00:00:00.000Z',
        'Brand': 'Adidas',
        'OrderAmount': 132845.0},
        {'CREATEDTS': '2021-09-27T00:00:00.000Z',
        'Brand': 'Zara',
        'OrderAmount': 3207.74},
        {'CREATEDTS': '2021-09-26T00:00:00.000Z',
        'Brand': 'Adidas',
        'OrderAmount': 141930.0},
        {'CREATEDTS': '2021-09-26T00:00:00.000Z',
        'Brand': 'Zara',
        'OrderAmount': 3657.7},
        {'CREATEDTS': '2021-09-25T00:00:00.000Z',
        'Brand': 'Adidas',
        'OrderAmount': 105760.0},
        {'CREATEDTS': '2021-09-25T00:00:00.000Z',
        'Brand': 'Zara',
        'OrderAmount': 6733.0},
        {'CREATEDTS': '2021-09-24T00:00:00.000Z',
        'Brand': 'Adidas',
        'OrderAmount': 105375.0},
        {'CREATEDTS': '2021-09-24T00:00:00.000Z',
        'Brand': 'Zara',
        'OrderAmount': 7752.56},
        {'CREATEDTS': '2021-09-23T00:00:00.000Z',
        'Brand': 'Adidas',
        'OrderAmount': 106010.0},
        {'CREATEDTS': '2021-09-23T00:00:00.000Z',
        'Brand': 'Zara',
        'OrderAmount': 6800.0},
        {'CREATEDTS': '2021-09-22T00:00:00.000Z',
        'Brand': 'Adidas',
        'OrderAmount': 139675.0},
        {'CREATEDTS': '2021-09-22T00:00:00.000Z',
        'Brand': 'Zara',
        'OrderAmount': 3889.0},
        {'CREATEDTS': '2021-09-21T00:00:00.000Z',
        'Brand': 'Adidas',
        'OrderAmount': 179230.0},
        {'CREATEDTS': '2021-09-21T00:00:00.000Z',
        'Brand': 'Zara',
        'OrderAmount': 3622.39},
        {'CREATEDTS': '2021-09-20T00:00:00.000Z',
        'Brand': 'Adidas',
        'OrderAmount': 174915.0},
        {'CREATEDTS': '2021-09-20T00:00:00.000Z',
        'Brand': 'Zara',
        'OrderAmount': 3879.0}])

    dimValsData = prepareAnomalyDataframes(
        datasetDf,
        "CREATEDTS",
        "OrderAmount",
        "Brand",
        "Min Avg Value",
        float(1000),
        True
    )

    assert len(dimValsData) == 2
    assert dimValsData[0]["dimVal"] == "Adidas"
    assert dimValsData[1]["dimVal"] == "Zara"

    dimValsData = prepareAnomalyDataframes(
        datasetDf,
        "CREATEDTS",
        "OrderAmount",
        "Brand",
        "Min Avg Value",
        float(10000), #Checking for minAvg 10000
        True
    )

    assert len(dimValsData) == 1
    assert dimValsData[0]["dimVal"] == "Adidas"
